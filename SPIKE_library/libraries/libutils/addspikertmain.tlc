%% ==============================================================================
%% Abstract:
%%   Example file process TLC script for Real-Time Workshop Embedded Coder
%%
%%   This 'File customization template,' which is entered into Templates page
%%   of the Configuration Parameters, creates an additional entry point function
%%   for the model to make the model's initialize function transparent to the
%%   caller.  In other words, the caller only needs to call this step function
%%   and the model initialization code will execute if necessary.
%%
%selectfile NULL_FILE

%assign srcName = LibGetMdlSrcBaseName()
%assign hdrName = LibGetMdlPubHdrBaseName()

%assign modelC  = LibCreateSourceFile("Source", "Simulink", srcName)
%assign modelH  = LibCreateSourceFile("Header", "Simulink", hdrName)

%% SPIKE-RT header includes 
%openfile tmpBuf

/* SPIKE-RT header includes */ 
/* Include system header */
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <syssvc/serial.h>
#include <pbsys/status.h>
#include <kernel.h>
#include <spike/hub/system.h>\

/* Include PUP header */
#include "spike/pup/motor.h"
#include "spike/pup/colorsensor.h"
#include "spike/pup/forcesensor.h"
#include "spike/pup/ultrasonicsensor.h"\

/* Include HUB header */
#include "spike/hub/battery.h"
#include "spike/hub/button.h"
#include "spike/hub/display.h"
#include "spike/hub/imu.h"
#include "spike/hub/light.h"
#include "spike/hub/speaker.h"
#include <spike/hub/bluetooth.h>

#include <pbio/color.h>\

%closefile tmpBuf
%<LibSetSourceFileSection(modelC, "Includes", tmpBuf)>

%% Variable definition of PUP devices
%openfile tmpBuf

/* Variable definition of PUP devices */
/* Motors */
pup_motor_t *motorA;
pup_motor_t *motorB;
pup_motor_t *motorC;
pup_motor_t *motorD;
pup_motor_t *motorE;
pup_motor_t *motorF;\

/* Colorsensors */
pup_device_t *ColorsensorA;
pup_device_t *ColorsensorB;
pup_device_t *ColorsensorC;
pup_device_t *ColorsensorD;
pup_device_t *ColorsensorE;
pup_device_t *ColorsensorF;\

/* Forcesensors */
pup_device_t *ForcesensorA;
pup_device_t *ForcesensorB;
pup_device_t *ForcesensorC;
pup_device_t *ForcesensorD;
pup_device_t *ForcesensorE;
pup_device_t *ForcesensorF;\

/* Ultrasensors */
pup_device_t *UltrasonicsensorA;
pup_device_t *UltrasonicsensorB;
pup_device_t *UltrasonicsensorC;
pup_device_t *UltrasonicsensorD;
pup_device_t *UltrasonicsensorE;
pup_device_t *UltrasonicsensorF;\

/* Functions declaration */
void Buttons(double* left, double* center, double* right, double* bt);
void Light(double col);
double Colorsensor(double port, double mode, double lighton);
double Ultrasonicsensor(double port, double mode, double lighton);
void Speaker(double frequency, double duration, double volume);
void longArrayToStringWithCommas(float *arr, int length, char *result, int DecPoint);
void Displaymat(double matrix[25]);\


int init_flag = 0;

%closefile tmpBuf
%<LibSetSourceFileSection(modelC, "Definitions", tmpBuf)>

%% Combine the model's initialize and step function into a single entry point
%openfile tmpBuf
/* Buttons wrapper function */
void Buttons(double* left, double* center, double* right, double* bt){
    hub_button_t pressed = 0;
    hub_button_is_pressed(&pressed);
    *left = 0;
    *center = 0;
    *right = 0;
    *bt = 0;
    switch (pressed) {
    case HUB_BUTTON_LEFT:
        *left = 1.0;
        break;
    case HUB_BUTTON_CENTER:
        *center = 1.0;
        break;
    case HUB_BUTTON_RIGHT:
        *right = 1.0;
        break;
    case HUB_BUTTON_BT:
        *bt = 1.0;
        break;
    default:
        break;
    }
}

/* Light wrapper function */
void Light(double col){
    switch ((uint8_t)col) {
        case 0: //white
            hub_light_on_hsv(&((pbio_color_hsv_t){0, 0, 100}));
            break;
        case 1: //red
            hub_light_on_hsv(&((pbio_color_hsv_t){4, 100, 100}));          
            break;
        case 2: //orange
            hub_light_on_hsv(&((pbio_color_hsv_t){23, 100, 100}));         
            break;
        case 3: //yellow
            hub_light_on_hsv(&((pbio_color_hsv_t){55, 100, 100}));        
            break;
        case 4: //green
            hub_light_on_hsv(&((pbio_color_hsv_t){113, 100, 100}));
            break;
        case 5: //blue
            hub_light_on_hsv(&((pbio_color_hsv_t){197, 100, 100}));
            break;
        case 6: //indigo
            hub_light_on_hsv(&((pbio_color_hsv_t){233, 100, 100}));           
            break;
        case 7: //violet
            hub_light_on_hsv(&((pbio_color_hsv_t){306, 100, 100}));
            break;
        default:
            hub_light_off();
            break;
    }
}

/* Colorsensor HSV wrapper function */
double Colorsensor(double port, double mode, double lighton){
    double colh = 0;
    double colout = 0;
    pup_color_hsv_t colhsv;
    
    switch ((uint8_t) port) {
        case 0:
            colhsv = pup_color_sensor_hsv(ColorsensorA, true);
        break;
        case 1:
            colhsv = pup_color_sensor_hsv(ColorsensorB, true);
        break;
        case 2:
            colhsv = pup_color_sensor_hsv(ColorsensorC, true);
        break;
        case 3:
            colhsv = pup_color_sensor_hsv(ColorsensorD, true);
        break;
        case 4:
            colhsv = pup_color_sensor_hsv(ColorsensorE, true);
        break;
        case 5:
            colhsv = pup_color_sensor_hsv(ColorsensorF, true);
        break;
        default:
            /* SPIKE-RT library config error */
        break;
    }
    colh = (double) colhsv.h;
    if ((colh <= 10) || (colh > 330)) {
        colout = 1; // red
    } else if ((colh > 10) && (colh <= 50)) {
        colout = 2; // orange
    } else if ((colh > 50) && (colh <= 80)) {
        colout = 3; // yellow
    } else if ((colh > 80) && (colh <= 160)) {
        colout = 4; // green
    } else if ((colh > 160) && (colh <= 200)) {
        colout = 5; // blue
    } else if ((colh > 200) && (colh <= 280)) {
        colout = 6; // indigo
    } else if ((colh > 280) && (colh <= 330)) {
        colout = 7; // violet
    } else {
        colout = 0;
    }
    return colout;
}

/* Ultrasonicsensor distance wrapper function */
double Ultrasonicsensor(double port, double mode, double lighton){
    double distance = 0;
        switch ((uint8_t) port) {
        case 0:
            distance = pup_ultrasonic_sensor_distance(UltrasonicsensorA);
        break;
        case 1:
            distance = pup_ultrasonic_sensor_distance(UltrasonicsensorB);
        break;
        case 2:
            distance = pup_ultrasonic_sensor_distance(UltrasonicsensorC);
        break;
        case 3:
            distance = pup_ultrasonic_sensor_distance(UltrasonicsensorD);
        break;
        case 4:
            distance = pup_ultrasonic_sensor_distance(UltrasonicsensorE);
        break;
        case 5:
            distance = pup_ultrasonic_sensor_distance(UltrasonicsensorF);
        break;
        default:
            /* SPIKE-RT library config error */
        break;
        }
    return distance;
}

/* Speaker wrapper function
void Speaker(double frequency, double duration, double volume){
if ((uint8_t)frequency == 0) {
    hub_speaker_stop();
    //dly_tsk(duration * 1000);
} else {
    hub_speaker_set_volume((uint8_t)volume); 
    hub_speaker_play_tone((uint16_t)frequency, (int32_t)duration);
}
}*/

/* Display Matrix wrapper function */
void Displaymat(double matrix[25]){
    uint8_T i, j;
    uint8_T matin[5][5];
    for (i = 0; i<5; i++) {
        for (j = 0; j<5;j++){
            matin[i][j] = (uint8_T)matrix[(i*5)+j];
        }
    }
    hub_display_image((uint8_t*)matin);
}

void Main(intptr_t exinf)
{
  /* Wait 0.5 sec */
  dly_tsk(500000);

  /* Initializing model data */
  %<LibCallModelInitialize()>\

  init_flag=1;
  
  while(1){
  }
}

void spike_cyc_task_high(intptr_t exinf)
{
  if(init_flag == 1){ 
    /* Model sync function */
    Task_sync();\
  }
}


%closefile tmpBuf
  
%<LibSetSourceFileSection(modelC, "Functions", tmpBuf)>

%% Add code to slapp.h
%openfile tmpBuf
/*
 * Copyright (c) 2023 Afrel Co., Ltd. 
 * All rights reserved
 */

#ifdef __cplusplus
extern "C" {
#endif

#include <kernel.h>

/*
 *  タスクの優先度の定義
 */
#define MAIN_PRIORITY	5		/* メインタスクの優先度 */

/*
 * Definitions of Port ID for Serial Adapter
 */
#define SIO_USART_F_PORTID    1
#define SIO_USB_PORTID        2
#define SIO_BLUETOOTH_PORTID  3
#define SIO_TEST_PORTID       4

#ifndef STACK_SIZE
#define	STACK_SIZE		4096		/* タスクのスタックサイズ */
#endif /* STACK_SIZE */

/*
 *  関数のプロトタイプ宣言
 */
#ifndef TOPPERS_MACRO_ONLY

extern void Main(intptr_t exinf);
extern void spike_cyc_task_high(intptr_t exinf);
extern void spike_cyc_task_low(intptr_t exinf);

#endif /* TOPPERS_MACRO_ONLY */
%closefile tmpBuf

%<LibSetSourceFileSection(modelH, "Includes", tmpBuf)>
