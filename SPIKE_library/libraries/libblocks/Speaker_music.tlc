%% file : Speaker_music.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for Speaker_music
%% 
%% Simulink version      : 24.1 (R2024a) 19-Nov-2023
%% TLC file generated on : 29-May-2024 13:36:19

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'Speaker_music';
     def.OutputFcnSpec = 'Speaker_music(uint16 u1[], uint32 u2, double u3)';
     def.HeaderFiles = {'sfunspikert.h'};
     def.SourceFiles = {'sfunspikert.c'};
     def.IncPaths = {'C:\class\coursefiles\spikertlib\libblocks'};
     def.SrcPaths = {'C:\class\coursefiles\spikertlib\libblocks'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements Speaker_music "C"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void
    %assign uint32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT32)
    %assign uint16Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT16)
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("Speaker_music_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        

        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("Speaker_music_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %% %<LibEmitPlatformTypeIncludes()>
        #endif

        %% #include "sfunspikert.h"

        

        %closefile cFile

        %% %<LibAddToCommonIncludes("%<hFileName>.h")>
        %% %<LibAddToModelSources("%<cFileName>")>
    %else
        %% %<LibAddToCommonIncludes("sfunspikert.h")>
    %endif
    %% %<SLibAddToStaticSources("sfunspikert.c")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel

    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %assign uint16Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT16)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign u3_val = LibBlockInputSignal(2, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
            Speaker_music_wrapper_Output_%<sfunInstanceName>(%<u1_ptr>, %<u2_val>, %<u3_val>);
        
        }
    %else
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign u3_val = LibBlockInputSignal(2, "", "", 0)
        %assign u1_size = LibBlockInputSignalWidth(0)
        %% 
        if (%<u3_val> == 0) {
            hub_speaker_stop();
        } else {
            hub_speaker_play_music((%<uint16Type>*)%<u1_ptr>, (uint16_t)%<u1_size>, (uint32_t)%<u2_val>);
        }
    %endif
%endfunction

%% [EOF]
