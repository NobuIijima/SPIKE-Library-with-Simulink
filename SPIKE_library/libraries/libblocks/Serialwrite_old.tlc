%% file : Serialwrite.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for Serialwrite
%% 
%% Simulink version      : 23.2 (R2023b) 01-Aug-2023
%% TLC file generated on : 28-Nov-2023 11:52:13

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'Serialwrite';
     def.OutputFcnSpec = 'Serialwrite(single u1[], double p1, double p2)';
     def.StartFcnSpec = 'SerialwriteInit()';
     def.HeaderFiles = {'sfunspikert.h'};
     def.SourceFiles = {'sfunspikert.c'};
     def.IncPaths = {'C:\class\coursefiles\SPIKE_Dev\libblocks'};
     def.SrcPaths = {'C:\class\coursefiles\SPIKE_Dev\libblocks'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements Serialwrite "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void
    %assign singleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_SINGLE)
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("Serialwrite_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        

        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("Serialwrite_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        %%#include "sfunspikert.h"

        

        %closefile cFile

        %%%<LibAddToCommonIncludes("%<hFileName>.h")>
        %%%<LibAddToModelSources("%<cFileName>")>
    %else
        %%%<LibAddToCommonIncludes("sfunspikert.h")>
    %endif
    %%%<SLibAddToStaticSources("sfunspikert.c")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
    %else
        %% 
        %assign mode = LibBlockParameterValue(p1,1)
        %assign waitConnect = LibBlockParameterValue(p2,1)
        %switch (mode)
            %case 0 %% USB
                serial_opn_por(SIO_USB_PORTID);
                %if waitConnect>0
                  char serial_rcv_data[10];                  
                  serial_rcv_data[0]='\0';
                  while(serial_rcv_data[0]=='\0'){
                    serial_rea_dat(SIO_USB_PORTID, serial_rcv_data, sizeof(serial_rcv_data));
                  }
                %endif
            %break
            %case 1 %% Bluetooth
                serial_opn_por(SIO_BLUETOOTH_PORTID);
            %break
            %case 2 %% UART_F
                serial_opn_por(SIO_UART_F_PORTID);
            %break
            %case 3 %% UART_E
                serial_opn_por(SIO_UART_E_PORTID);
            %break
            %default
                /* Config error */
            %break
        %endswitch
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %assign singleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_SINGLE)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
    %else
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign u1_size = LibBlockInputSignalWidth(0)
        %% 
        %assign mode = LibBlockParameterValue(p1,1)
        %switch (mode)
            %case 0 %% USB
                char result_ASCII[100];
                result_ASCII[0] = '\0';
                longArrayToStringWithCommas(%<u1_ptr>, %<u1_size>, result_ASCII);
                serial_wri_dat(SIO_USB_PORTID, result_ASCII, strlen(result_ASCII));
                %%serial_wri_dat(SIO_USB_PORTID, %<u1_ptr>, %<u1_size>*4);
            %break
            %case 1 %% Bluetooth
                serial_wri_dat(SIO_BLUETOOTH_PORTID, %<u1_ptr>, %<u1_size>*4);
            %break
            %case 2 %% UART_F
                serial_wri_dat(SIO_UART_F_PORTID, %<u1_ptr>, %<u1_size>*4);
            %break
            %case 3 %% UART_E
                serial_wri_dat(SIO_UART_E_PORTID, %<u1_ptr>, %<u1_size>*4);
            %break
            %default
                /* Config error */
            %break
        %endswitch
    %endif
%endfunction

%% [EOF]
