%% file : DisplayText.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for DisplayText
%% 
%% Simulink version      : 23.2 (R2023b) 01-Aug-2023
%% TLC file generated on : 27-Nov-2023 23:42:31

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'DisplayText';
     def.OutputFcnSpec = 'Displaytext(int8 u1[], double u2, double p1)';
     def.StartFcnSpec = 'DisplaytextInit()';
     def.HeaderFiles = {'sfunspikert.h'};
     def.SourceFiles = {'sfunspikert.c'};
     def.IncPaths = {'C:\class\coursefiles\SPIKE_Dev\libblocks'};
     def.SrcPaths = {'C:\class\coursefiles\SPIKE_Dev\libblocks'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements DisplayText "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void
    %assign int8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_INT8)
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("DisplayText_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        

        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("DisplayText_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %% %<LibEmitPlatformTypeIncludes()>
        #endif

        %% #include "sfunspikert.h"

        

        %closefile cFile

        %% %<LibAddToCommonIncludes("%<hFileName>.h")>
        %% %<LibAddToModelSources("%<cFileName>")>
    %else
        %% %<LibAddToCommonIncludes("sfunspikert.h")>
    %endif
    %% %<SLibAddToStaticSources("sfunspikert.c")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        
    %else
        %% 
        %assign upside = LibBlockParameterValue(p1,1)
        %switch (upside)
            %case 0 %% TOP
                hub_display_orientation(PBIO_SIDE_TOP);
            %break
            %case 1 %% LEFT
                hub_display_orientation(PBIO_SIDE_LEFT);
            %break
            %case 2 %% RIGHT
                hub_display_orientation(PBIO_SIDE_RIGHT);
            %break
            %case 3 %% BOTTOM
                hub_display_orientation(PBIO_SIDE_BOTTOM);
            %break
            %default
                /* Config error */
            %break
        %endswitch
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %assign int8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_INT8)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %% 
    %else
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %% 
        hub_display_text_scroll((%<int8Type>*)%<u1_ptr>, %<u2_val>);
    %endif
%endfunction

%% [EOF]
