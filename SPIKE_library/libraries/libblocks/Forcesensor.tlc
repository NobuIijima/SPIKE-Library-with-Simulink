%% file : Forcesensor.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for Forcesensor
%% 
%% Simulink version      : 10.7 (R2023a) 19-Nov-2022
%% TLC file generated on : 08-Oct-2023 15:55:36

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'Forcesensor';
     def.OutputFcnSpec = 'Forcesensor(double p1, double y1[1], double y2[1])';
     def.StartFcnSpec = 'ForcesensorInit()';
     def.HeaderFiles = {'sfunspikert.h'};
     def.SourceFiles = {'sfunspikert.c'};
     def.IncPaths = {'C:\class\coursefiles\spikertlib\libblocks'};
     def.SrcPaths = {'C:\class\coursefiles\spikertlib\libblocks'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements Forcesensor "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("Forcesensor_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %% %<SLibEmitIncludesForBasicTypesAll()>
        #endif
        
        

        extern void Forcesensor_wrapper_Start(void);
        extern void Forcesensor_wrapper_Output(const %<doubleType> p1,  %<doubleType>* y1,  %<doubleType>* y2);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("Forcesensor_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %% %<SLibEmitIncludesForBasicTypesAll()>
        #endif

        %% #include "sfunspikert.h"

        

        void Forcesensor_wrapper_Start(void) {
            ForcesensorInit();
        }

        void Forcesensor_wrapper_Output(const %<doubleType> p1,  %<doubleType>* y1,  %<doubleType>* y2) {
            Forcesensor((%<doubleType>)(p1), y1, y2);
        }

        %closefile cFile

        %% %<LibAddToCommonIncludes("%<hFileName>.h")>
        %% %<LibAddToModelSources("%<cFileName>")>
    %else
        %% %<LibAddToCommonIncludes("sfunspikert.h")>
    %endif
    %% %<SLibAddToStaticSources("sfunspikert.c")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %% Forcesensor_wrapper_Start();
                %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        ForcesensorA = pup_force_sensor_get_device (PBIO_PORT_ID_A);
                    %break
                    %case 1 %% B
                        ForcesensorB = pup_force_sensor_get_device (PBIO_PORT_ID_B);
                    %break
                    %case 2 %% C
                        ForcesensorC = pup_force_sensor_get_device (PBIO_PORT_ID_C);
                    %break
                    %case 3 %% D
                        ForcesensorD = pup_force_sensor_get_device (PBIO_PORT_ID_D);
                    %break
                    %case 4 %% E
                        ForcesensorE = pup_force_sensor_get_device (PBIO_PORT_ID_E);
                    %break
                    %case 5 %% F
                        ForcesensorF = pup_force_sensor_get_device (PBIO_PORT_ID_F);
                    %break
                    %default
                        /* SPIKE-RT library config error */
                    %break
                %endswitch
    %else
        %% 
        %% ForcesensorInit();
                %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        ForcesensorA = pup_force_sensor_get_device (PBIO_PORT_ID_A);
                    %break
                    %case 1 %% B
                        ForcesensorB = pup_force_sensor_get_device (PBIO_PORT_ID_B);
                    %break
                    %case 2 %% C
                        ForcesensorC = pup_force_sensor_get_device (PBIO_PORT_ID_C);
                    %break
                    %case 3 %% D
                        ForcesensorD = pup_force_sensor_get_device (PBIO_PORT_ID_D);
                    %break
                    %case 4 %% E
                        ForcesensorE = pup_force_sensor_get_device (PBIO_PORT_ID_E);
                    %break
                    %case 5 %% F
                        ForcesensorF = pup_force_sensor_get_device (PBIO_PORT_ID_F);
                    %break
                    %default
                        /* SPIKE-RT library config error */
                    %break
                %endswitch
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
                %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
                %assign y2_val = LibBlockOutputSignal(1, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %% Forcesensor_wrapper_Output(%<p1_val>, %<y1_ptr>, %<y2_ptr>);
                %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        %<y1_val> = (double) pup_force_sensor_force (ForcesensorA);
                        %<y2_val> = (double) pup_force_sensor_distance (ForcesensorA);
                    %break
                    %case 1 %% B
                        %<y1_val> = (double) pup_force_sensor_force (ForcesensorB);
                        %<y2_val> = (double) pup_force_sensor_distance (ForcesensorB);
                    %break
                    %case 2 %% C
                        %<y1_val> = (double) pup_force_sensor_force (ForcesensorC);
                        %<y2_val> = (double) pup_force_sensor_distance (ForcesensorC);
                    %break
                    %case 3 %% D
                        %<y1_val> = (double) pup_force_sensor_force (ForcesensorD);
                        %<y2_val> = (double) pup_force_sensor_distance (ForcesensorD);
                    %break
                    %case 4 %% E
                        %<y1_val> = (double) pup_force_sensor_force (ForcesensorE);
                        %<y2_val> = (double) pup_force_sensor_distance (ForcesensorE);
                    %break
                    %case 5 %% F
                        %<y1_val> = (double) pup_force_sensor_force (ForcesensorF);
                        %<y2_val> = (double) pup_force_sensor_distance (ForcesensorF);
                    %break
                    %default
                        /* SPIKE-RT library config error */
                    %break
                %endswitch
    %else
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
                        %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
                        %assign y2_val = LibBlockOutputSignal(1, "", "", 0)
        %% 
        %% Forcesensor(%<p1_val>, %<y1_ptr>, %<y2_ptr>);
                %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        %<y1_val> = (double) pup_force_sensor_force (ForcesensorA);
                        %<y2_val> = (double) pup_force_sensor_distance (ForcesensorA);
                    %break
                    %case 1 %% B
                        %<y1_val> = (double) pup_force_sensor_force (ForcesensorB);
                        %<y2_val> = (double) pup_force_sensor_distance (ForcesensorB);
                    %break
                    %case 2 %% C
                        %<y1_val> = (double) pup_force_sensor_force (ForcesensorC);
                        %<y2_val> = (double) pup_force_sensor_distance (ForcesensorC);
                    %break
                    %case 3 %% D
                        %<y1_val> = (double) pup_force_sensor_force (ForcesensorD);
                        %<y2_val> = (double) pup_force_sensor_distance (ForcesensorD);
                    %break
                    %case 4 %% E
                        %<y1_val> = (double) pup_force_sensor_force (ForcesensorE);
                        %<y2_val> = (double) pup_force_sensor_distance (ForcesensorE);
                    %break
                    %case 5 %% F
                        %<y1_val> = (double) pup_force_sensor_force (ForcesensorF);
                        %<y2_val> = (double) pup_force_sensor_distance (ForcesensorF);
                    %break
                    %default
                        /* SPIKE-RT library config error */
                    %break
                %endswitch
    %endif
%endfunction

%% [EOF]
