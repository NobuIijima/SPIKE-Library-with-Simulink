%% file : Colorsensor.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for Colorsensor
%% 
%% Simulink version      : 10.7 (R2023a) 19-Nov-2022
%% TLC file generated on : 08-Oct-2023 15:50:12

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'Colorsensor';
     def.OutputFcnSpec = 'double y1 = Colorsensor(double p1, double p2, double p3)';
     def.StartFcnSpec = 'ColorsensorInit()';
     def.HeaderFiles = {'sfunspikert.h'};
     def.SourceFiles = {'sfunspikert.c'};
     def.IncPaths = {'C:\class\coursefiles\spikertlib\libblocks'};
     def.SrcPaths = {'C:\class\coursefiles\spikertlib\libblocks'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements Colorsensor "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("Colorsensor_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %% %<SLibEmitIncludesForBasicTypesAll()>
        #endif
        
        

        extern void Colorsensor_wrapper_Start(void);
        extern void Colorsensor_wrapper_Output( %<doubleType>* y1, const %<doubleType> p1, const %<doubleType> p2, const %<doubleType> p3);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("Colorsensor_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %% %<SLibEmitIncludesForBasicTypesAll()>
        #endif

        %% #include "sfunspikert.h"

        

        void Colorsensor_wrapper_Start(void) {
        %assign lighton = LibBlockParameterValue(p3,1)
        %switch (lighton)
            %case 0 %% off
                %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        ColorsensorA = pup_color_sensor_get_device (PBIO_PORT_ID_A);
                        pup_color_sensor_light_set(ColorsensorA, 0, 0, 0);
                    %break
                    %case 1 %% B
                        ColorsensorB = pup_color_sensor_get_device (PBIO_PORT_ID_B);
                        pup_color_sensor_light_set(ColorsensorB, 0, 0, 0);
                    %break
                    %case 2 %% C
                        ColorsensorC = pup_color_sensor_get_device (PBIO_PORT_ID_C);
                        pup_color_sensor_light_set(ColorsensorC, 0, 0, 0);
                    %break
                    %case 3 %% D
                        ColorsensorD = pup_color_sensor_get_device (PBIO_PORT_ID_D);
                        pup_color_sensor_light_set(ColorsensorD, 0, 0, 0);
                    %break
                    %case 4 %% E
                        ColorsensorE = pup_color_sensor_get_device (PBIO_PORT_ID_E);
                        pup_color_sensor_light_set(ColorsensorE, 0, 0, 0);
                    %break
                    %case 5 %% F
                        ColorsensorF = pup_color_sensor_get_device (PBIO_PORT_ID_F);
                        pup_color_sensor_light_set(ColorsensorF, 0, 0, 0);
                    %break
                    %default
                        /* Config error */
                    %break
                %endswitch
            %break
            %case 1 %% on
                %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        ColorsensorA = pup_color_sensor_get_device (PBIO_PORT_ID_A);
                        pup_color_sensor_light_set(ColorsensorA, 100, 100, 100);
                    %break
                    %case 1 %% B
                        ColorsensorB = pup_color_sensor_get_device (PBIO_PORT_ID_B);
                        pup_color_sensor_light_set(ColorsensorB, 100, 100, 100);
                    %break
                    %case 2 %% C
                        ColorsensorC = pup_color_sensor_get_device (PBIO_PORT_ID_C);
                        pup_color_sensor_light_set(ColorsensorC, 100, 100, 100);
                    %break
                    %case 3 %% D
                        ColorsensorD = pup_color_sensor_get_device (PBIO_PORT_ID_D);
                        pup_color_sensor_light_set(ColorsensorD, 100, 100, 100);
                    %break
                    %case 4 %% E
                        ColorsensorE = pup_color_sensor_get_device (PBIO_PORT_ID_E);
                        pup_color_sensor_light_set(ColorsensorE, 100, 100, 100);
                    %break
                    %case 5 %% F
                        ColorsensorF = pup_color_sensor_get_device (PBIO_PORT_ID_F);
                        pup_color_sensor_light_set(ColorsensorF, 100, 100, 100);
                    %break
                    %default
                        /* SPIKE-RT library config error */
                    %break
                %endswitch
            %break
            %default
                /* SPIKE-RT library config error */
            %break
        %endswitch

        }

        void Colorsensor_wrapper_Output( %<doubleType>* y1, const %<doubleType> p1, const %<doubleType> p2, const %<doubleType> p3) {
           %%  *y1 = Thiscolorsensor((%<doubleType>)(p1), (%<doubleType>)(p2), (%<doubleType>)(p3));
                    %assign mode = LibBlockParameterValue(p2,1)
    %switch (mode)
        %case 0 %% Reflection
             %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        *y1 = (double) pup_color_sensor_reflection(ColorsensorA);
                    %break
                    %case 1 %% B
                        *y1 = (double) pup_color_sensor_reflection(ColorsensorB);
                    %break
                    %case 2 %% C
                        *y1 = (double) pup_color_sensor_reflection(ColorsensorC);
                    %break
                    %case 3 %% D
                        *y1 = (double) pup_color_sensor_reflection(ColorsensorD);
                    %break
                    %case 4 %% E
                        *y1 = (double) pup_color_sensor_reflection(ColorsensorE);
                    %break
                    %case 5 %% F
                        *y1 = (double) pup_color_sensor_reflection(ColorsensorF);
                    %break
                    %default
                        /* SPIKE-RT library config error */
                    %break
                %endswitch
            %break
        %case 1 %% Ambient
            %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        *y1 = (double) pup_color_sensor_ambient(ColorsensorA);
                    %break
                    %case 1 %% B
                        *y1 = (double) pup_color_sensor_ambient(ColorsensorB);
                    %break
                    %case 2 %% C
                        *y1 = (double) pup_color_sensor_ambient(ColorsensorC);
                    %break
                    %case 3 %% D
                        *y1 = (double) pup_color_sensor_ambient(ColorsensorD);
                    %break
                    %case 4 %% E
                        *y1 = (double) pup_color_sensor_ambient(ColorsensorE);
                    %break
                    %case 5 %% F
                        *y1 = (double) pup_color_sensor_ambient(ColorsensorF);
                    %break
                    %default
                        /* SPIKE-RT library config error */
                    %break
                %endswitch
            %break
            %case 2 %% Color
                %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        *y1 = Colorsensor(0, 2, 0);
                    %break
                    %case 1 %% B
                        *y1 = Colorsensor(1, 2, 0);
                    %break
                    %case 2 %% C
                        *y1 = Colorsensor(2, 2, 0);
                    %break
                    %case 3 %% D
                        *y1 = Colorsensor(3, 2, 0);
                    %break
                    %case 4 %% E
                        *y1 = Colorsensor(4, 2, 0);
                    %break
                    %case 5 %% F
                        *y1 = Colorsensor(5, 2, 0);
                    %break
                    %default
                        /* SPIKE-RT library config error */
                    %break
                %endswitch
            %break
        %default
            /* SPIKE-RT library config error */
            %break
    %endswitch
        }

        %closefile cFile

        %% %<LibAddToCommonIncludes("%<hFileName>.h")>
        %% %<LibAddToModelSources("%<cFileName>")>
    %else
        %% %<LibAddToCommonIncludes("sfunspikert.h")>
    %endif
    %% %<SLibAddToStaticSources("sfunspikert.c")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        Colorsensor_wrapper_Start();
    %else
        %assign lighton = LibBlockParameterValue(p3,1)
        %switch (lighton)
            %case 0 %% off
                %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        ColorsensorA = pup_color_sensor_get_device (PBIO_PORT_ID_A);
                        pup_color_sensor_light_set (ColorsensorA, 0, 0, 0);
                    %break
                    %case 1 %% B
                        ColorsensorB = pup_color_sensor_get_device (PBIO_PORT_ID_B);
                        pup_color_sensor_light_set (ColorsensorB, 0, 0, 0);
                    %break
                    %case 2 %% C
                        ColorsensorC = pup_color_sensor_get_device (PBIO_PORT_ID_C);
                        pup_color_sensor_light_set (ColorsensorC, 0, 0, 0);
                    %break
                    %case 3 %% D
                        ColorsensorD = pup_color_sensor_get_device (PBIO_PORT_ID_D);
                        pup_color_sensor_light_set (ColorsensorD, 0, 0, 0);
                    %break
                    %case 4 %% E
                        ColorsensorE = pup_color_sensor_get_device (PBIO_PORT_ID_E);
                        pup_color_sensor_light_set (ColorsensorE, 0, 0, 0);
                    %break
                    %case 5 %% F
                        ColorsensorF = pup_color_sensor_get_device (PBIO_PORT_ID_F);
                        pup_color_sensor_light_set (ColorsensorF, 0, 0, 0);
                    %break
                    %default
                        /* Config error */
                    %break
                %endswitch
            %break
            %case 1 %% on
                %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        ColorsensorA = pup_color_sensor_get_device (PBIO_PORT_ID_A);
                        pup_color_sensor_light_set (ColorsensorA, 100, 100, 100);
                    %break
                    %case 1 %% B
                        ColorsensorB = pup_color_sensor_get_device (PBIO_PORT_ID_B);
                        pup_color_sensor_light_set (ColorsensorB, 100, 100, 100);
                    %break
                    %case 2 %% C
                        ColorsensorC = pup_color_sensor_get_device (PBIO_PORT_ID_C);
                        pup_color_sensor_light_set (ColorsensorC, 100, 100, 100);
                    %break
                    %case 3 %% D
                        ColorsensorD = pup_color_sensor_get_device (PBIO_PORT_ID_D);
                        pup_color_sensor_light_set (ColorsensorD, 100, 100, 100);
                    %break
                    %case 4 %% E
                        ColorsensorE = pup_color_sensor_get_device (PBIO_PORT_ID_E);
                        pup_color_sensor_light_set (ColorsensorE, 100, 100, 100);
                    %break
                    %case 5 %% F
                        ColorsensorF = pup_color_sensor_get_device (PBIO_PORT_ID_F);
                        pup_color_sensor_light_set (ColorsensorF, 100, 100, 100);
                    %break
                    %default
                        /* SPIKE-RT library config error */
                    %break
                %endswitch
            %break
            %default
                /* SPIKE-RT library config error */
            %break
        %endswitch
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        Colorsensor_wrapper_Output(%<y1_ptr>, %<p1_val>, %<p2_val>, %<p3_val>);
    %else
        %if !LibBlockOutputSignalIsExpr(0)
            %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
            %assign p1_val = LibBlockParameter(p1, "", "", 0)
            %assign p2_val = LibBlockParameter(p2, "", "", 0)
            %assign p3_val = LibBlockParameter(p3, "", "", 0)
            %% 
            %% %<y1_val> = Colorsensor(%<p1_val>, %<p2_val>, %<p3_val>);
            %assign mode = LibBlockParameterValue(p2,1)
    %switch (mode)
        %case 0 %% Reflection
             %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        %<y1_val> = (double) pup_color_sensor_reflection(ColorsensorA);
                    %break
                    %case 1 %% B
                        %<y1_val> = (double) pup_color_sensor_reflection(ColorsensorB);
                    %break
                    %case 2 %% C
                        %<y1_val> = (double) pup_color_sensor_reflection(ColorsensorC);
                    %break
                    %case 3 %% D
                        %<y1_val> = (double) pup_color_sensor_reflection(ColorsensorD);
                    %break
                    %case 4 %% E
                        %<y1_val> = (double) pup_color_sensor_reflection(ColorsensorE);
                    %break
                    %case 5 %% F
                        %<y1_val> = (double) pup_color_sensor_reflection(ColorsensorF);
                    %break
                    %default
                        /* SPIKE-RT library config error */
                    %break
                %endswitch
            %break
        %case 1 %% Ambient
            %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        %<y1_val> = (double) pup_color_sensor_ambient(ColorsensorA);
                    %break
                    %case 1 %% B
                        %<y1_val> = (double) pup_color_sensor_ambient(ColorsensorB);
                    %break
                    %case 2 %% C
                        %<y1_val> = (double) pup_color_sensor_ambient(ColorsensorC);
                    %break
                    %case 3 %% D
                        %<y1_val> = (double) pup_color_sensor_ambient(ColorsensorD);
                    %break
                    %case 4 %% E
                        *%<y1_val> = (double) pup_color_sensor_ambient(ColorsensorE);
                    %break
                    %case 5 %% F
                        %<y1_val> = (double) pup_color_sensor_ambient(ColorsensorF);
                    %break
                    %default
                        /* SPIKE-RT library config error */
                    %break
                %endswitch
            %break
            %case 2 %% Color
                %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        %<y1_val> = Colorsensor(0, 2, 0);
                    %break
                    %case 1 %% B
                        %<y1_val> = Colorsensor(1, 2, 0);
                    %break
                    %case 2 %% C
                        %<y1_val> = Colorsensor(2, 2, 0);
                    %break
                    %case 3 %% D
                        %<y1_val> = Colorsensor(3, 2, 0);
                    %break
                    %case 4 %% E
                        %<y1_val> = Colorsensor(4, 2, 0);
                    %break
                    %case 5 %% F
                        %<y1_val> = Colorsensor(5, 2, 0);
                    %break
                    %default
                        /* SPIKE-RT library config error */
                    %break
                %endswitch
            %break
        %default
            /* SPIKE-RT library config error */
            %break
    %endswitch
        %endif
    %endif
%endfunction

%% Function: BlockOutputSignal ============================================
%function BlockOutputSignal (block,system,portIdx,ucv,lcv,idx,retType) void
    %assign p1_val = LibBlockParameter(p1, "", "", 0)
    %assign p2_val = LibBlockParameter(p2, "", "", 0)
    %assign p3_val = LibBlockParameter(p3, "", "", 0)
    %% 
    %switch retType
      %case "Signal"
        %if portIdx == 0
          %% %return "Colorsensor(%<p1_val>, %<p2_val>, %<p3_val>)"
    %assign mode = LibBlockParameterValue(p2,1)
    %switch (mode)
        %case 0 %% Reflection
             %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        %return "(double) pup_color_sensor_reflection(ColorsensorA)"
                    %break
                    %case 1 %% B
                        %return "(double) pup_color_sensor_reflection(ColorsensorB)"
                    %break
                    %case 2 %% C
                        %return "(double) pup_color_sensor_reflection(ColorsensorC)"
                    %break
                    %case 3 %% D
                        %return "(double) pup_color_sensor_reflection(ColorsensorD)"
                    %break
                    %case 4 %% E
                        %return "(double) pup_color_sensor_reflection(ColorsensorE)"
                    %break
                    %case 5 %% F
                        %return "(double) pup_color_sensor_reflection(ColorsensorF)"
                    %break
                    %default
                        %return "/* SPIKE-RT library config error */"
                    %break
                %endswitch
            %break
        %case 1 %% Ambient
            %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        %return "(double) pup_color_sensor_ambient(ColorsensorA)"
                    %break
                    %case 1 %% B
                        %return "(double) pup_color_sensor_ambient(ColorsensorB)"
                    %break
                    %case 2 %% C
                        %return "(double) pup_color_sensor_ambient(ColorsensorC)"
                    %break
                    %case 3 %% D
                        %return "(double) pup_color_sensor_ambient(ColorsensorD)"
                    %break
                    %case 4 %% E
                        %return "(double) pup_color_sensor_ambient(ColorsensorE)"
                    %break
                    %case 5 %% F
                        %return "(double) pup_color_sensor_ambient(ColorsensorF)"
                    %break
                    %default
                        %return "/* SPIKE-RT library config error */"
                    %break
                %endswitch
            %break
            %case 2 %% Color
                %assign portid = LibBlockParameterValue(p1,1)
                %switch (portid)
                    %case 0 %% A
                        %return "(double) Colorsensor(0,2,0)"
                    %break
                    %case 1 %% B
                        %return "(double) Colorsensor(1,2,0)"
                    %break
                    %case 2 %% C
                        %return "(double) Colorsensor(2,2,0)"
                    %break
                    %case 3 %% D
                        %return "(double) Colorsensor(3,2,0)"
                    %break
                    %case 4 %% E
                        %return "(double) Colorsensor(4,2,0)"
                    %break
                    %case 5 %% F
                        %return "(double) Colorsensor(5,2,0)"
                    %break
                    %default
                        %return "/* SPIKE-RT library config error */"
                    %break
                %endswitch
            %break
        %default
                        %return "/* SPIKE-RT library config error */"
            %break
    %endswitch
        %else
          %assign errTxt = "Block output port index not supported: %<portIdx>"
          %<LibBlockReportError(block,errTxt)>
        %endif
      %default
        %assign errTxt = "Unsupported return type: %<retType>"
        %<LibBlockReportError(block,errTxt)>
    %endswitch
%endfunction

%% [EOF]
