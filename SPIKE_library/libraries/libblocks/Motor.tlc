%% file : Motor.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for Motor
%% 
%% Simulink version      : 23.2 (R2023b) 01-Aug-2023
%% TLC file generated on : 13-Dec-2023 09:28:19

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'Motor';
     def.OutputFcnSpec = 'Motor(double p1, double p2, double p3, double p4, double u1)';
     def.StartFcnSpec = 'MotorInit()';
     def.HeaderFiles = {'sfunspikert.h'};
     def.SourceFiles = {'sfunspikert.c'};
     def.IncPaths = {'C:\class\coursefiles\SPIKE_Dev\libblocks'};
     def.SrcPaths = {'C:\class\coursefiles\SPIKE_Dev\libblocks'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements Motor "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
    
    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("Motor_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        

        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("Motor_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %% %<SLibEmitIncludesForBasicTypesAll()>
        #endif

        %% #include "sfunspikert.h"

        

        %closefile cFile

        %% %<LibAddToCommonIncludes("%<hFileName>.h")>
        %% %<LibAddToModelSources("%<cFileName>")>
    %else
        %% %<LibAddToCommonIncludes("sfunspikert.h")>
    %endif
    %% %<SLibAddToStaticSources("sfunspikert.c")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %% Motor_wrapper_Start();
        %assign portid = LibBlockParameterValue(p1,1)
        %assign mode = LibBlockParameterValue(p2,1)
        %assign encorder_reset = LibBlockParameterValue(p3,1)
        %assign direction = LibBlockParameterValue(p4,1)
        %switch (portid)
            %case 0 %% A
                motorA = pup_motor_get_device(PBIO_PORT_ID_A);
                %if direction==0
                    pup_motor_setup(motorA, PUP_DIRECTION_CLOCKWISE, true);
                %else
                    pup_motor_setup(motorA, PUP_DIRECTION_COUNTERCLOCKWISE, true);
                %endif
                
                %if encorder_reset
                    pup_motor_reset_count(motorA);
                %endif
                %if mode==2
                    pup_motor_stop(motorA);
                %endif
                
            %break
            %case 1 %% B
                motorB = pup_motor_get_device(PBIO_PORT_ID_B);
                %if direction==0
                    pup_motor_setup(motorB, PUP_DIRECTION_CLOCKWISE, true);
                %else
                    pup_motor_setup(motorB, PUP_DIRECTION_COUNTERCLOCKWISE, true);
                %endif

                %if encorder_reset
                    pup_motor_reset_count(motorB);
                %endif
                %if mode==2
                    pup_motor_stop(motorB);
                %endif
            %break
            %case 2 %% C
                motorC = pup_motor_get_device(PBIO_PORT_ID_C);
                %if direction==0
                    pup_motor_setup(motorC, PUP_DIRECTION_CLOCKWISE, true);
                %else
                    pup_motor_setup(motorC, PUP_DIRECTION_COUNTERCLOCKWISE, true);
                %endif
                %if encorder_reset
                    pup_motor_reset_count(motorC);
                %endif
                %if mode==2
                    pup_motor_stop(motorC);
                %endif
            %break
            %case 3 %% D
                motorD = pup_motor_get_device(PBIO_PORT_ID_D);
                %if direction==0
                    pup_motor_setup(motorD, PUP_DIRECTION_CLOCKWISE, true);
                %else
                    pup_motor_setup(motorD, PUP_DIRECTION_COUNTERCLOCKWISE, true);
                %endif
                %if encorder_reset
                    pup_motor_reset_count(motorD);
                %endif
                %if mode==2
                    pup_motor_stop(motorD);
                %endif
            %break
            %case 4 %% E
                motorE = pup_motor_get_device(PBIO_PORT_ID_E);
                %if direction==0
                    pup_motor_setup(motorE, PUP_DIRECTION_CLOCKWISE, true);
                %else
                    pup_motor_setup(motorE, PUP_DIRECTION_COUNTERCLOCKWISE, true);
                %endif
                %if encorder_reset
                    pup_motor_reset_count(motorE);
                %endif
                %if mode==2
                    pup_motor_stop(motorE);
                %endif
            %break
            %case 5 %% F
                motorF = pup_motor_get_device(PBIO_PORT_ID_F);
                %if direction==0
                    pup_motor_setup(motorF, PUP_DIRECTION_CLOCKWISE, true);
                %else
                    pup_motor_setup(motorF, PUP_DIRECTION_COUNTERCLOCKWISE, true);
                %endif
                %if encorder_reset
                    pup_motor_reset_count(motorF);
                %endif
                %if mode==2
                    pup_motor_stop(motorF);
                %endif
            %break
            %default
                /* SPIKE-RT library config error */
            %break
        %endswitch
    %else
        %% 
        %% MotorInit();
        %assign portid = LibBlockParameterValue(p1,1)
        %assign mode = LibBlockParameterValue(p2,1)
        %assign encorder_reset = LibBlockParameterValue(p3,1)
        %assign direction = LibBlockParameterValue(p4,1)
        %switch (portid)
            %case 0 %% A
                motorA = pup_motor_get_device(PBIO_PORT_ID_A);
                %if direction==0
                    pup_motor_setup(motorA, PUP_DIRECTION_CLOCKWISE, true);
                %else
                    pup_motor_setup(motorA, PUP_DIRECTION_COUNTERCLOCKWISE, true);
                %endif
                
                %if encorder_reset
                    pup_motor_reset_count(motorA);
                %endif
                %if mode==2
                    pup_motor_stop(motorA);
                %endif
                
            %break
            %case 1 %% B
                motorB = pup_motor_get_device(PBIO_PORT_ID_B);
                %if direction==0
                    pup_motor_setup(motorB, PUP_DIRECTION_CLOCKWISE, true);
                %else
                    pup_motor_setup(motorB, PUP_DIRECTION_COUNTERCLOCKWISE, true);
                %endif

                %if encorder_reset
                    pup_motor_reset_count(motorB);
                %endif
                %if mode==2
                    pup_motor_stop(motorB);
                %endif
            %break
            %case 2 %% C
                motorC = pup_motor_get_device(PBIO_PORT_ID_C);
                %if direction==0
                    pup_motor_setup(motorC, PUP_DIRECTION_CLOCKWISE, true);
                %else
                    pup_motor_setup(motorC, PUP_DIRECTION_COUNTERCLOCKWISE, true);
                %endif
                %if encorder_reset
                    pup_motor_reset_count(motorC);
                %endif
                %if mode==2
                    pup_motor_stop(motorC);
                %endif
            %break
            %case 3 %% D
                motorD = pup_motor_get_device(PBIO_PORT_ID_D);
                %if direction==0
                    pup_motor_setup(motorD, PUP_DIRECTION_CLOCKWISE, true);
                %else
                    pup_motor_setup(motorD, PUP_DIRECTION_COUNTERCLOCKWISE, true);
                %endif
                %if encorder_reset
                    pup_motor_reset_count(motorD);
                %endif
                %if mode==2
                    pup_motor_stop(motorD);
                %endif
            %break
            %case 4 %% E
                motorE = pup_motor_get_device(PBIO_PORT_ID_E);
                %if direction==0
                    pup_motor_setup(motorE, PUP_DIRECTION_CLOCKWISE, true);
                %else
                    pup_motor_setup(motorE, PUP_DIRECTION_COUNTERCLOCKWISE, true);
                %endif
                %if encorder_reset
                    pup_motor_reset_count(motorE);
                %endif
                %if mode==2
                    pup_motor_stop(motorE);
                %endif
            %break
            %case 5 %% F
                motorF = pup_motor_get_device(PBIO_PORT_ID_F);
                %if direction==0
                    pup_motor_setup(motorF, PUP_DIRECTION_CLOCKWISE, true);
                %else
                    pup_motor_setup(motorF, PUP_DIRECTION_COUNTERCLOCKWISE, true);
                %endif
                %if encorder_reset
                    pup_motor_reset_count(motorF);
                %endif
                %if mode==2
                    pup_motor_stop(motorF);
                %endif
            %break
            %default
                /* SPIKE-RT library config error */
            %break
        %endswitch
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %% 
        %assign portid = LibBlockParameterValue(p1,1)
        %assign mode = LibBlockParameterValue(p2,1)
        %switch (portid)
            %case 0 %% A
                %if mode == 0
                    pup_motor_set_speed(motorA, (int16_t) %<u1_val>);
                %elseif mode == 1
                    pup_motor_set_power(motorA, (int16_t) %<u1_val>);
                %endif
            %break
            %case 1 %% B
                %if mode == 0
                    pup_motor_set_speed(motorB, (int16_t) %<u1_val>);
                %elseif mode == 1
                    pup_motor_set_power(motorB, (int16_t) %<u1_val>);
                %endif
            %break
            %case 2 %% C
                %if mode == 0
                    pup_motor_set_speed(motorC, (int16_t) %<u1_val>);
                %elseif mode == 1
                    pup_motor_set_power(motorC, (int16_t) %<u1_val>);
                %endif
            %break
            %case 3 %% D
                %if mode == 0
                    pup_motor_set_speed(motorD, (int16_t) %<u1_val>);
                %elseif mode == 1
                    pup_motor_set_power(motorD, (int16_t) %<u1_val>);
                %endif
            %break
            %case 4 %% E
                %if mode == 0
                    pup_motor_set_speed(motorE, (int16_t) %<u1_val>);
                %elseif mode == 1
                    pup_motor_set_power(motorE, (int16_t) %<u1_val>);
                %endif
            %break
            %case 5 %% F
                %if mode == 0
                    pup_motor_set_speed(motorF, (int16_t) %<u1_val>);
                %elseif mode == 1
                    pup_motor_set_power(motorF, (int16_t) %<u1_val>);
                %endif
            %break
            %default
                /* SPIKE-RT library config error */
            %break
        %endswitch
    %else
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %% 
        %assign portid = LibBlockParameterValue(p1,1)
        %assign mode = LibBlockParameterValue(p2,1)
        %switch (portid)
            %case 0 %% A
                %if mode == 0
                    pup_motor_set_speed(motorA, (int16_t) %<u1_val>);
                %elseif mode == 1
                    pup_motor_set_power(motorA, (int16_t) %<u1_val>);
                %endif
            %break
            %case 1 %% B
                %if mode == 0
                    pup_motor_set_speed(motorB, (int16_t) %<u1_val>);
                %elseif mode == 1
                    pup_motor_set_power(motorB, (int16_t) %<u1_val>);
                %endif
            %break
            %case 2 %% C
                %if mode == 0
                    pup_motor_set_speed(motorC, (int16_t) %<u1_val>);
                %elseif mode == 1
                    pup_motor_set_power(motorC, (int16_t) %<u1_val>);
                %endif
            %break
            %case 3 %% D
                %if mode == 0
                    pup_motor_set_speed(motorD, (int16_t) %<u1_val>);
                %elseif mode == 1
                    pup_motor_set_power(motorD, (int16_t) %<u1_val>);
                %endif
            %break
            %case 4 %% E
                %if mode == 0
                    pup_motor_set_speed(motorE, (int16_t) %<u1_val>);
                %elseif mode == 1
                    pup_motor_set_power(motorE, (int16_t) %<u1_val>);
                %endif
            %break
            %case 5 %% F
                %if mode == 0
                    pup_motor_set_speed(motorF, (int16_t) %<u1_val>);
                %elseif mode == 1
                    pup_motor_set_power(motorF, (int16_t) %<u1_val>);
                %endif
            %break
            %default
                /* SPIKE-RT library config error */
            %break
        %endswitch
    %endif
%endfunction

%% [EOF]
